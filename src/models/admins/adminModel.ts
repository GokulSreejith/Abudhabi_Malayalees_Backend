import mongoose from "mongoose";
import bcrypt from "bcrypt";
import { IAdmin } from "../../interfaces";
import { config } from "../../config/index";

const { ADMINS } = config.MONGO_COLLECTIONS;

interface IAdminDocument extends IAdmin {
  matchPassword(password: string): boolean;
}

const adminSchema = new mongoose.Schema<IAdminDocument>(
  {
    name: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    phone: {
      type: String,
      required: true,
      unique: true,
    },
    role: {
      type: String,
      enum: ["SuperAdmin", "Admin", "ProjectAdmin"],
      default: "Admin",
    },
    password: {
      type: String,
      required: true,
      select: false,
    },
    autoGeneratedPasswd: {
      type: Boolean,
      default: false,
      select: false,
    },
    resetPasswordAccess: {
      type: Boolean,
      default: false,
      select: false,
    },
    address: {
      type: String,
    },
    pincode: {
      type: String,
    },
    status: {
      type: String,
      enum: ["Active", "Inactive", "Blocked"],
      default: "Active",
    },
    lastSync: {
      type: Date,
      required: true,
      default: Date.now(),
    },
    lastUsed: {
      type: Date,
      required: true,
      default: Date.now(),
    },
    isDeleted: {
      type: Boolean,
      default: false,
    },
    deletedAt: {
      type: Date,
      default: undefined,
    },
  },
  {
    timestamps: true,
  }
);

adminSchema.methods.matchPassword = async function (password: string) {
  return await bcrypt.compare(password, this.password);
};

adminSchema.pre("save", async function (next: any) {
  if (!this.isModified("password")) {
    next();
  }

  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password ?? "", salt);
});

export default mongoose.model<IAdminDocument>(ADMINS, adminSchema);
